// Arrays: Semicolons can be omitted if each value is places on a separate line

let names = [| "Rose"; "Martha"; "Donna"; "Amy"; "Clara" |]

// An array can be generated by enclosing a sequence expression between [| and |]
let lines = [| use r = new System.IO.StreamReader("ArnoldMovies.txt") 
               while not r.EndOfStream do yield r.ReadLine() |]

lines |> Seq.iter (printfn "%s")

// Empty arrays
let emptyArray = [| |]

// Depending on context a type annotation may be needed when creating an empty array
// to prevent the compiler from auto generalizing it
let emptyArray2 : int array = [| |]
let empryArray3 : int[] = [| |]
let emptyArray4 = Array.empty<string>


// Create an array with all elements initialized with default values
let stringArray = Array.zeroCreate<string> 5  // FYI THIS WILL DEFAULT TO NULL BE AWARE OF POSSIBLE NREs

// Initialize an array with Array.init
let stringArray2 = Array.init 5 (fun _ -> "")

// Accessing array elements
let name1 = names.[1]

// Updating array elements
names.[1] <- "Jenny"

// More functional approach to retrieving and updating array elements
let movies = [| "The Terminator"; "Predator"; "Commando"; |]

Array.set movies 1 "Batman & Robin"
Array.get movies 1 |> printfn "%s"

// Arrays support slice expressions
Array.iter (printfn "%s") lines.[1..3]

// Copy array
[| 1..10 |] |> Array.copy |> ignore


// Sorting Arrays
let r = System.Random()
let ints = Array.init 5 (fun _ -> r.Next(-100, 100))
ints |> Array.sortInPlace
Array.iter (printfn "%d") ints